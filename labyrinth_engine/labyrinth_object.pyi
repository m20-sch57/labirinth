from labyrinth_engine.labyrinth import Labyrinth
from labyrinth_engine.lr_types import Location, Item, Player, Creature
from labyrinth_engine.ui_buttons import Button
from labyrinth_engine.ui_status_bars import Bar, StringBar

from typing import Any, Dict, Union, List, Callable, TypeVar

class LabyrinthObject:
    labyrinth: Labyrinth
    _lrtype: str
    turn_set: Dict[str, Dict[str, Callable[[], Any]]]
    flags: Dict[str: Any]
    button_set: List[Button]
    bar_set: List[Bar]
    parent: Union[None, AnyLO]
    name: str

    def __init__(self) -> None: ...

    # Предлагаемые игрокам ходы.
    def new_at(self, function: Callable[[], None], condition: Callable[[], bool], turn_name: str) -> None: ...
    def get_turns(self) -> Dict[str, Dict[str, Callable[[], Any]]]: ...

    # Флаги.
    def set_flag(self, flag_name: str, arg: Any = ...) -> None: ...
    def delete_flag(self, flag_name: str) -> Any: ...
    def have_flag(self, flag_name: str) -> bool: ...
    def get_flag(self, flag_name: str, default: Any = ...) -> Any: ...

    # Кнопки.
    def new_button(self, turn: str, image: str): ...
    def new_dbutton(self, turns: List[str], image: str): ...
    def new_lbutton(self, turns: List[str], image: str, turn_images): ...
    def get_buttons(self) -> List[Button]: ...

    # Бары.
    def new_status_bar(self, name: str, init_value: Dict[Player, Any]) -> StringBar: ...
    def get_bars(self) -> List[Bar]: ...

    # Родители, дети и т.д.
    def set_parent(self, parent: AnyLO) -> None: ...
    def get_parent(self) -> Union[None, AnyLO]: ...
    def get_children(self,
                     lrtype: Union[str, List[str]] = ...,
                     class_names: Union[str, List[str]] = ...,
                     flags: List[str] = ...,
                     key: Callable[[AnyLO], bool] = ...): ...

    @property
    def lrtype(self) -> str:
        return self._lrtype

    def main(self) -> None: ...

    def set_settings(self,
                     settings: Dict[str, Any],
                     locations: List[Location],
                     items: List[Item],
                     creatures: List[Creature],
                     players: List[Player]) -> None: ...

    def get_name(self) -> str: ...

    def set_name(self, name: str) -> None: ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

AnyLO = TypeVar('AnyLO', bound=LabyrinthObject)
