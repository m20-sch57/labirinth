class Labirinth


аргументы:
	-room
содержит всю необходимую информацию о комнате
room = [field, user_id_list]



методы:
	-make_turn(turn)
turn - ход сделанный игроком. должным быть элементом множества доступных ходов.
	-get_active_player_user_id()
	-get_active_player_ams()
AMS - available moves set - множество доступных ходов


---

Создание своих локаций и предметов

новая локация/предмет должна быть унаследованна от класса LabirinthObject

логику поведения предмета или локации определяет метод main. он вызывается на каждом ходу.
можно использовать self.<вставить_что-то_из_следующего_списка>
	field
	items
	locations
	players
	active_player
	parent_id

self.send_msg(msg, user_id) - отправляет сообщение соответствующему игроку

испульзуйте декоратор new_ams чтобы создать действие доступное игроку.
аргументы:
	-condition должент быть функцией возвращающей True или False в зависимости от того 
должно соответствующее действие быть доступным игроку или нет
	-move_name имя команды, которое должен ввести игрок, чтобы выполнить это действие

пример:

@new_ams(self, condition = lambda: self.parent_id == self.active_player.location_id, move_name = 'Поднять предмет')
def rise(self):
	self.parent_id = self.active_playe.player_id	